#!/usr/bin/env python3
'''
This module is a test for TaskPlannerPlan action. It creates an action client for
that action and checks the result based on the response.
'''

from __future__ import print_function

NODE = 'test_task_planner_plan'

import rospy
import unittest
import pymongo as pm
from actionlib import SimpleActionClient

from ropod_ros_msgs.msg import TaskRequest
from task_planner_ros_wrapper.msg import TaskPlannerPredicate, TaskPlannerFluent
from task_planner_ros_wrapper.msg import TaskPlannerPlanAction, TaskPlannerPlanGoal
from diagnostic_msgs.msg import KeyValue

class TestTaskPlannerPlan(unittest.TestCase):

    """Test TaskPlannerPlan action."""

    @classmethod
    def setUpClass(cls):
        """Initialise ros node
        """
        rospy.init_node(NODE)
        cls.action_name = '/ropod_task_planning/task_planner/plan'
        cls.db_name = 'ropod_kb_ros'
        client = pm.MongoClient()

    def setUp(self):
        """Get service proxy
        """
        self.client = SimpleActionClient(self.action_name, TaskPlannerPlanAction)
        print("waiting for service")
        connected = self.client.wait_for_server()
        print("connected to server")

    @classmethod
    def tearDownClass(self):
        """Clear mongo db
        """
        client = pm.MongoClient()
        client.drop_database(self.db_name)
        rospy.signal_shutdown("Test complete")

    def test_plan(self):
        task_request = TaskRequest() #TODO: initialise correctly
        goals = self._get_goals()
        req = TaskPlannerPlanGoal(
            task_request = task_request,
            robot_name = 'frank',
            task_goals = goals)
        self.client.send_goal(req)
        self.client.wait_for_result(timeout=rospy.Duration(10))
        result = self.client.get_result()
        rospy.loginfo(result)
        self.assertTrue(result.plan_found)
        print(result.actions)

    def _get_goals(self):
        return list()

if __name__ == "__main__":
    unittest.main()
